knitr::opts_chunk$set(echo = FALSE)
library(genetics)
load("SNPChr20.rda")
dim(Y)
Y[1:5, 1:5]
D <- as.matrix(dist(Y), method="manhattan")
D[1:5, 1:5]
X <- mds.out$points[,1:2]
mds.out <- cmdscale(D, k=n-1, eig=TRUE)
n <- nrow(Y)
mds.out <- cmdscale(D, k=n-1, eig=TRUE)
X <- mds.out$points[,1:2]
plot(X[,1],X[,2], asp=1, xlab = "First principal axis", ylab="Second principal axis")
mds.out$eig
mds.out$points
plot(X[,1],X[,2], X[,3], asp=1, xlab = "First principal axis", ylab="Second principal axis")
mds.out$eig
plot(X[,1],X[,2], asp=1, xlab = "First principal axis", ylab="Second principal axis")
mds.out$GOF
D2 <- as.matrix(dist(Y))
n <- nrow(Y)
mds.out <- cmdscale(D2, k=n-1, eig=TRUE)
X <- mds.out$points[,1:2]
plot(X[,1],X[,2], asp=1, xlab = "First principal axis", ylab="Second principal axis")
mds.out$eig
mds.out$GOF
Dobs.vec <- D2[lower.tri(D2)] #gives an indicator matrix whether a particular entry is below diagonal or no
# returns values only below the diagonal
Dest.vec <- Dest[lower.tri(Dest)]
Dest <- D2
Dest # creates all distances between points I have on my computer screen
Dobs.vec <- D2[lower.tri(D2)] #gives an indicator matrix whether a particular entry is below diagonal or no
# returns values only below the diagonal
Dest.vec <- Dest[lower.tri(Dest)]
plot(Dobs.vec, Dest.vec, xlab="Observed", ylab="fitted")
Dest <- as.matrix(dist(X))
Dest # creates all distances between points I have on my computer screen
Dobs.vec <- D2[lower.tri(D2)] #gives an indicator matrix whether a particular entry is below diagonal or no
# returns values only below the diagonal
Dest.vec <- Dest[lower.tri(Dest)]
plot(Dobs.vec, Dest.vec, xlab="Observed", ylab="fitted")
abline(0,1,col="blue")
abline(0,1,col="blue")
plot(Dobs.vec, Dest.vec, xlab="Observed", ylab="fitted")
abline(0,1,col="blue")
plot(Dobs.vec, Dest.vec, xlab="Observed", ylab="fitted")
abline(0,1,col="blue")
dim(Dobs.vec)
summary(Dobs.vec)
Dobs.vec
length(Dobs.vec)
length(Dest.vec)
length(Dobs.vec)
plot(Dobs.vec, Dest.vec, xlab="Observed", ylab="fitted")
plot(cumsum(mds.out$eig) / sum(mds.out$eig),
type="h", lwd=5, las=1,
xlab="Number of dimensions",
ylab=expression(R^2))
plot(cumsum(mds.out$eig) / sum(mds.out$eig),
xlab="Number of dimensions",
ylab=expression(R^2))
cumsum(mds.out$eig)
sum(mds.out$eig)
plot(cumsum(mds.out$eig) / sum(mds.out$eig),
xlab="Number of dimensions",
ylab=expression(R^2))
cumsum(mds.out$eig)[1:2]
cumsum(mds.out$eig)[1:2] / sum(mds.out$eig)
cumsum(mds.out$eig[1:2]) / sum(mds.out$eig)
plot(cumsum(mds.out$eig) / sum(mds.out$eig),
xlab="Number of dimensions",
ylab=expression(R^2))
sum(mds.out$eig)
cumsum(mds.out$eig[1:2])
ds.out$eig[2] / sum(mds.out$eig)
mds.out$eig[2] / sum(mds.out$eig)
knitr::opts_chunk$set(echo = FALSE)
library(genetics)
Dest <- as.matrix(dist(X)) # creates all distances between points I have on my computer screen
knitr::opts_chunk$set(echo = FALSE)
library(genetics)
load("SNPChr20.rda")
#dim(Y)
#Y[1:5, 1:5]
D <- as.matrix(dist(Y, method="manhattan", diag = FALSE))
#following the definition above
#manhattan_distance <- function(p,q){
#  sum(abs(p-q))
#}
#manhattan distance from 6 to 7
#manhattan_distance(as.numeric(Y[1,]),as.numeric(Y[2,]))
#sum(abs(as.numeric(Y[1,]) - as.numeric(Y[2,])), na.rm = TRUE)
D[1:5, 1:5]
D2 <- as.matrix(dist(Y))
n <- nrow(Y)
mds.out <- cmdscale(D2, k=n-1, eig=TRUE)
X <- mds.out$points[,1:2]
plot(X[,1],X[,2], asp=1, xlab = "First principal axis", ylab="Second principal axis")
Dest <- as.matrix(dist(X)) # creates all distances between points I have on my computer screen
is.euclid(dist(X))
library(ade4)
Y[1:5, 1:5]
D2 <- dist(Y)
is.euclid(D2)
mds.out$GOF
library(genetics)
library(ade4)
load("SNPChr20.rda")
D = dist(Y, method = "manhattan")
lower.tri
?lower.tri
observed
observed <- D[lower.tri(D)]
observed
library(HardyWeinberg)
load(url("http://www-eio.upc.es/~jan/data/bsg/Yoruba10000.rda"))
ls()
head(X.Fam)
X.Geno[1:5,1:5]
X.Fam[1:5,1:5]
View(X.Fam)
dim(X.Geno)
X.Fam[1:5,1:5]
X.Geno[1:5,1:5]
nrow(X.Geno)
ncol(X.Geno)
table(X.Geno[1:5,1:5])
names(table(X.Geno[1:5,1:5]))
strsplit(names(table(X.Geno[1:5,1:5])))
strsplit(names(table(X.Geno[1:5,1:5])), "")
unlist(strsplit(names(table(X.Geno[1:5,1:5])), ""))
unique(unlist(strsplit(names(table(X.Geno[1:5,1:5])), "")))
length(unique(unlist(strsplit(names(table(X.Geno[1:5,1:5])), ""))))
n.alleles <- function(x) {
y <- length(unique(unlist(strsplit(names(table(x)),""))))
return(y)
}
n.alleles(X.Geno[,2])
numalleles <- apply(X.Geno,2,n.alleles)
table(numalleles)
View(n.alleles)
numalleles
length(unique(unlist(strsplit(names(table(X.Geno[,1:5])), ""))))
X.Geno[1:5,1:5]
get.alleles <- function(x) {
y <- unique(unlist(strsplit(names(table(x)),"")))
if(length(y)==1) als <- paste(y,"X",sep="/") else
als <- paste(y[1],y[2],sep="/")
return(als)
}
table(X.Geno[,2])
get.alleles(X.Geno[,2])
alleles
alleles <- apply(X.Geno,2,get.alleles)
alleles
X <- recode(X.Geno,alleles)
library(HardyWeinberg)
setwd("C:/Users/Oll/Dropbox/2017kool/BioInformatics/StatisticalGenetics/upc-bioinformatics/HW5")
